import{setBadge,setSummary,prependEvent,el,setChip}from"./ui.mjs";import{connectRetry}from"./sse.mjs";import{startMetricsPolling,mapMetrics}from"./metrics.mjs";(function(){setBadge("js loaded @ "+(new Date).toLocaleTimeString());setChip("chip-stream","muted","STREAM: connecting…");setChip("chip-metrics","muted","METRICS: polling…");const btn=el("#btn-apply");if(btn){btn.addEventListener("click",()=>{const owner=el("#owner")?.value?.trim();const repo=el("#repo")?.value?.trim();el("#repo-info").textContent=(owner&&repo)?`${owner}/${repo}`:"대상 미지정"})}const stop=startMetricsPolling({intervalMs:15000,onUpdate:(data)=>{const m=mapMetrics(data);setSummary(m);setChip("chip-metrics","ok","METRICS: ok");},onError:(_)=>{prependEvent("[metrics] unavailable","muted")},onStatus:(st)=>{if(st==="ok")setChip("chip-metrics","ok","METRICS: ok");else setChip("chip-metrics","warn","METRICS: waiting…")}});function classify(d){try{if(typeof d==="string"){return{txt:d,cls:"muted"}}if(d&&d.type){const T=String(d.type).toLowerCase();let cls="muted";if(T.includes("workflow")&&(d.conclusion==="failure"||d.action==="failure"||d.status==="failure"))cls="err";else if(T.includes("pull")||T.includes("issue")||T.includes("push"))cls="ok";const name=T.replace(/[_-]/g," ").toUpperCase();const act=d.action?(" "+d.action.toUpperCase()):"";return{txt:"["+name+"]"+act,cls}}return{txt:JSON.stringify(d),cls:"muted"}}catch{return{txt:String(d),cls:"muted"}}}const url=window.__KOBONG_EVENTS_URL||"/events";prependEvent("[ui] connect → "+url,"muted");connectRetry(url,{onstate:(st)=>{if(st==="open"){setBadge("stream: open");setChip("chip-stream","ok","STREAM: open")}else if(st==="connecting"){setChip("chip-stream","muted","STREAM: connecting…")}else if(st==="error"){setChip("chip-stream","warn","STREAM: retrying…")}},onopen:()=>{prependEvent("[open] "+(new Date).toLocaleTimeString(),"ok")},onmessage:(d)=>{const {txt,cls}=classify(d);prependEvent(txt,cls)},onerror:(_)=>{},onreconnect:(ms)=>{setBadge("reconnect in "+Math.round(ms/1000)+"s")}});window.addEventListener("beforeunload",()=>{try{stop()}catch{}})})();