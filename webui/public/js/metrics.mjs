export async function fetchMetrics(urls){if(!urls){urls=[];if(typeof window!=="undefined"&&window.__KOBONG_METRICS_URL)urls.push(window.__KOBONG_METRICS_URL);urls.push("/metrics","/api/metrics","http://127.0.0.1:8088/metrics")}for(const u of urls){try{const r=await fetch(u,{cache:"no-store"});if(!r.ok)continue;const ct=(r.headers.get("content-type")||"").toLowerCase();if(ct.includes("application/json"))return await r.json();const tx=await r.text();try{return JSON.parse(tx)}catch{continue}}catch{}}return null}export function startMetricsPolling({intervalMs=15000,onUpdate,onError,onStatus}={}){let stopped=false;let lastErr=0;async function tick(){if(stopped)return;const jitter=Math.floor(Math.random()*800);try{const data=await fetchMetrics();if(data){onStatus&&onStatus("ok");onUpdate&&onUpdate(data)}else{const now=Date.now();if(now-lastErr>30000){onError&&onError(new Error("no metrics"));lastErr=now}onStatus&&onStatus("down")}}catch(e){const now=Date.now();if(now-lastErr>30000){onError&&onError(e);lastErr=now}onStatus&&onStatus("down")}finally{setTimeout(tick,intervalMs+jitter)}}tick();return()=>{stopped=true}}export function mapMetrics(m){const out={pr:0,issue:0,failed:0,alert:0};if(!m)return out;const get=(...keys)=>{for(const k of keys){if(m[k]!=null)return m[k];if(m.summary&&m.summary[k]!=null)return m.summary[k]}return null};out.pr=get("open_prs","prs_open","pr_open","pulls_open","pr")??out.pr;out.issue=get("open_issues","issues_open","issue_open","issue")??out.issue;out.failed=get("failed_workflows","workflow_failed","failed")??out.failed;out.alert=get("alerts","warnings","alert")??out.alert;return out}