name: AK7 Run

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

jobs:
  run:
    if: startsWith(github.event.comment.body, '/ak ')
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2 }

      - name: Parse command
        id: parse
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest; $ErrorActionPreference='Stop'
          $parts = "${{ github.event.comment.body }}".Trim().Split(' ',[System.StringSplitOptions]::RemoveEmptyEntries)
          $cmd   = if ($parts.Length -ge 2) { $parts[1] } else { 'scan' }
          $mode  = if ($parts.Length -ge 3) { $parts[2] } else { 'preview' }  # 안전상 preview 기본
          "cmd=$cmd"  | Out-File $env:GITHUB_OUTPUT -Append
          "mode=$mode"| Out-File $env:GITHUB_OUTPUT -Append

      - name: Run AK task
        shell: pwsh
        env: { AK_MODE: ${{ steps.parse.outputs.mode }} }
        run: |
          Set-StrictMode -Version Latest; $ErrorActionPreference='Stop'
          $map = @{ scan='ak-scan.ps1'; rewrite='ak-rewrite.ps1'; fix='ak-fixloop.ps1'; test='ak-test.ps1'; fixloop='ak-fixloop.ps1' }
          $cmd = '${{ steps.parse.outputs.cmd }}'
          if (-not $map.ContainsKey($cmd)) { throw "Unknown /ak subcommand: $cmd" }

          $candidates = @(
            Join-Path 'scripts/g5' $map[$cmd],
            Join-Path 'scripts'    $map[$cmd],
            $map[$cmd]
          )
          $script = $null
          foreach ($p in $candidates) { if (Test-Path $p) { $script=$p; break } }
          if (-not $script) { throw "Script not found: $($map[$cmd]) in scripts/g5 or scripts" }

          Write-Host ">> Running $script (mode=$env:AK_MODE)"
          & pwsh -NoProfile -File $script -Mode $env:AK_MODE 2>&1 | Tee-Object -FilePath .ak-out.txt

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ak7-logs
          path: |
            .ak-out.txt
            logs/ak7.jsonl
            logs/**/*.log
          if-no-files-found: ignore

      - name: Reply with tail
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}   # App 토큰 없이 기본 토큰으로 댓글
          script: |
            const fs = require('fs');
            const tail = fs.readFileSync('.ak-out.txt','utf8').split('\n').slice(-80).join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: "✅ `/ak` done (" + "${{ steps.parse.outputs.cmd }}" + " " + "${{ steps.parse.outputs.mode }}" + ").\n\n```\n"+ tail +"\n```"
            });

