name: AK7 run (/ak only, robust)

on:
  issue_comment:
    types: [created, edited]        # 이슈/PR 대화 댓글
  pull_request_review_comment:
    types: [created, edited]        # PR "Files changed" 줄댓글
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Issue/PR number"
        required: true
      body:
        description: "Comment body to simulate"
        required: true

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

jobs:
  ak:
    runs-on: ubuntu-latest
    steps:
      - name: Compute target + detect /ak
        id: gate
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const ev  = context.eventName;
            const body = (ev === 'workflow_dispatch')
              ? core.getInput('body', {required: true})
              : (context.payload.comment?.body ?? '');
            // 허용: 앞에 공백/백틱/인용문(>)가 있어도 매칭, 대소문자 무시
            const re = /(^|[\s`>])\/ak(\b|[\s`])/i;
            const isAK = re.test(body);
            // 타깃 번호: 이슈/PR/줄댓글 모두 커버
            let issue = (ev === 'workflow_dispatch')
              ? Number(core.getInput('issue_number', {required: true}))
              : (context.payload.issue?.number
                  ?? context.payload.pull_request?.number
                  ?? (() => {
                       const u = context.payload.comment?.pull_request_url || '';
                       const m = u.match(/\/pulls\/(\d+)(?:$|[/?#])/);
                       return m ? Number(m[1]) : undefined;
                     })());

            core.setOutput('body', body);
            core.setOutput('isAK', isAK ? '1' : '0');
            core.setOutput('issue', issue ?? '');

            core.summary.addHeading('gate');
            core.summary.addTable([
              [{data:'event',header:true},{data:ev}],
              [{data:'isAK',header:true},{data:String(isAK)}],
              [{data:'issue',header:true},{data:String(issue)}],
              [{data:'body',header:true},{data:body.slice(0,200)}],
            ]);
            await core.summary.write();

      - name: ACK comment (only when /ak)
        if: ${{ steps.gate.outputs.isAK == '1' && steps.gate.outputs.issue != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const issue = Number('${{ steps.gate.outputs.issue }}');
            const body  = `${{ toJson(steps.gate.outputs.body) }}`.trim();
            await github.rest.issues.createComment({
              owner: context.repo.owner, repo: context.repo.repo,
              issue_number: issue,
              body: `ack ✅ ${body}`
            });

      - name: Skip note (when not /ak)
        if: ${{ steps.gate.outputs.isAK != '1' }}
        run: echo "not /ak — no op"

      # 실제 실행은 Windows 러너에서 (여기선 트리거/회신만 책임)
      - name: Done
        run: echo "gate+ack complete"

          exec:
    needs: ak
    if: ${{ steps.gate.outputs.isAK == '1' }}   # ak-run 쪽의 gate/캡처 이름에 맞게 조정
    uses: ./.github/workflows/ak-exec.yml
    with:
      issue_number: ${{ steps.gate.outputs.issue }}
      body:         ${{ steps.gate.outputs.body }}

