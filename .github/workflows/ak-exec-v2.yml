name: AK7 exec v2

on:
  issue_comment:
    types: [created, edited]          # PR 대화 댓글도 issue_comment 이벤트로 들어옴
  pull_request_review_comment:
    types: [created, edited]          # PR 줄댓글

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

jobs:
  exec:
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      # 1) /ak 감지 + 타깃 번호
      - id: gate
        shell: pwsh
        run: |
          $body = @"
          ${{ github.event.comment.body }}
          "@.Trim()
          if ($body -match '(?is)(^|[\s`>])/ak(\b|[\s`])') { $isAK='1' } else { $isAK='0' }
          "isAK=$isAK" | Out-File $env:GITHUB_OUTPUT -Append
          "issue=${{ github.event.issue.number }}" | Out-File $env:GITHUB_OUTPUT -Append
          "body=$body" | Out-File $env:GITHUB_OUTPUT -Append
          New-Item -ItemType File -Force .ak-out.txt | Out-Null

      # 2) ACK (여기서도 찍음)
      - name: ack
        if: ${{ steps.gate.outputs.isAK == '1' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner, repo: context.repo.repo,
              issue_number: Number("${{ steps.gate.outputs.issue }}"),
              body: `ack ✅ ${{ toJson(${{ steps.gate.outputs.body }}) }} (exec v2)`
            });

      # 3) PR 컨텍스트 탐지 (이슈면 git 실행 스킵)
      - name: detect PR
        id: pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            try {
              const {data} = await github.rest.pulls.get({
                owner: context.repo.owner, repo: context.repo.repo,
                pull_number: context.payload.issue.number
              });
              core.setOutput('isPR','1');
              core.setOutput('headRepo', data.head.repo.full_name);
              core.setOutput('headRef',  data.head.ref);
              core.setOutput('headSha',  data.head.sha);
            } catch { core.setOutput('isPR','0'); }

      # 4) /ak [cmd] [mode] 파싱
      - name: parse
        if: ${{ steps.gate.outputs.isAK == '1' }}
        id: parse
        shell: pwsh
        run: |
          $p = "${{ steps.gate.outputs.body }}".Trim().Split(' ',[System.StringSplitOptions]::RemoveEmptyEntries)
          "cmd=$($p[1] ?? 'scan')"     | Out-File $env:GITHUB_OUTPUT -Append
          "mode=$($p[2] ?? 'preview')" | Out-File $env:GITHUB_OUTPUT -Append

      # 5) 이슈면 안내만
      - name: not PR notice
        if: ${{ steps.gate.outputs.isAK == '1' && steps.pr.outputs.isPR != '1' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner, repo: context.repo.repo,
            issue_number: Number("${{ steps.gate.outputs.issue }}"),
            body: "ℹ️ `/ak` 실행은 **PR 대화**에서 동작합니다. 현재는 Issue라 git 작업을 스킵했어요."
          });

      # 6) PR에서만 실제 실행 (실패해도 tail/아티팩트 보장)
      - name: run (PR only)
        if: ${{ steps.gate.outputs.isAK == '1' && steps.pr.outputs.isPR == '1' }}
        id: runstep
        shell: pwsh
        continue-on-error: true
        env:
          CMD:          ${{ steps.parse.outputs.cmd }}
          MODE:         ${{ steps.parse.outputs.mode }}
          AK_HEAD_REPO: ${{ steps.pr.outputs.headRepo }}
          AK_HEAD_REF:  ${{ steps.pr.outputs.headRef }}
          AK_HEAD_SHA:  ${{ steps.pr.outputs.headSha }}
        run: |
          Set-StrictMode -Version Latest; $ErrorActionPreference='Stop'
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name  "github-actions[bot]"

          $map=@{ scan='ak-scan.ps1'; rewrite='ak-rewrite.ps1'; fix='ak-fixloop.ps1'; test='ak-test.ps1'; dispatch='ak-dispatch.ps1' }
          if(-not $map.ContainsKey($env:CMD)){ "Unknown cmd: $env:CMD" | Tee-Object .ak-out.txt -Append; "exit_code=10" | Out-File $env:GITHUB_OUTPUT -Append; exit 10 }

          $want=$map[$env:CMD]
          $cand=@( Join-Path 'scripts/g5' $want; Join-Path 'scripts' $want; $want ) | Where-Object { Test-Path $_ }
          if(-not $cand){
            $found = Get-ChildItem -Recurse -File -Filter $want -ErrorAction SilentlyContinue | Select-Object -First 1 -Expand FullName
            if($found){ $cand=@($found) }
          }
          if(-not $cand){ "Script not found: $want" | Tee-Object .ak-out.txt -Append; "exit_code=11" | Out-File $env:GITHUB_OUTPUT -Append; exit 11 }

          $script=$cand[0]
          $supportsMode = try { (Get-Command $script -ErrorAction Stop).Parameters.ContainsKey('Mode') } catch { $false }
          $args=@(); if($supportsMode){ $args += @('-Mode',$env:MODE) }

          ">> PR head: $env:AK_HEAD_REPO@$env:AK_HEAD_REF ($env:AK_HEAD_SHA)" | Tee-Object .ak-out.txt -Append
          ">> Running $script $args" | Tee-Object .ak-out.txt -Append

          try { & pwsh -NoProfile -ExecutionPolicy Bypass -File $script @args 2>&1 | Tee-Object .ak-out.txt -Append; $code=$LASTEXITCODE }
          catch { $_ | Out-String | Tee-Object .ak-out.txt -Append; $code=1 }
          "exit_code=$code" | Out-File $env:GITHUB_OUTPUT -Append

      # 7) 로그/꼬리 보장
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ak7-logs
          path: |
            .ak-out.txt
            logs/**/*.log
          if-no-files-found: ignore

      - name: tail
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
        script: |
          const fs = require('fs');
          let tail='(no .ak-out.txt)'; try { tail = fs.readFileSync('.ak-out.txt','utf8').split('\n').slice(-120).join('\n'); } catch {}
          await github.rest.issues.createComment({
            owner: context.repo.owner, repo: context.repo.repo,
            issue_number: Number("${{ steps.gate.outputs.issue }}"),
            body: `✅ exec v2 done\n\n\`\`\`\n${tail}\n\`\`\``
          });
