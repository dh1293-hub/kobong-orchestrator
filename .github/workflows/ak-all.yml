name: AK7 (ack + run)

on:
  issue_comment:
    types: [created]
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

jobs:
  ack:
    if: ${{ startsWith(github.event.comment.body, '/ak') }}
    runs-on: ubuntu-latest
    outputs:
      body: ${{ steps.capture.outputs.body }}
    steps:
      - id: capture
        run: echo "body=${{ github.event.comment.body }}" >> $GITHUB_OUTPUT
      - uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const body = context.payload.comment.body.trim();
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `ack ✅ ${body} (trigger ok)`
            });

  run:
    needs: ack
    if: ${{ startsWith(needs.ack.outputs.body, '/ak') }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Parse
        id: parse
        shell: pwsh
        run: |
          $p = "${{ needs.ack.outputs.body }}".Trim().Split(' ',[System.StringSplitOptions]::RemoveEmptyEntries)
          "cmd=$($p[1] ?? 'scan')"     | Out-File $env:GITHUB_OUTPUT -Append
          "mode=$($p[2] ?? 'preview')" | Out-File $env:GITHUB_OUTPUT -Append
          New-Item -ItemType File -Force .ak-out.txt | Out-Null

      - name: Run AK task
        id: runstep
        shell: pwsh
        env: { AK_MODE: ${{ steps.parse.outputs.mode }} }
        run: |
          Set-StrictMode -Version Latest; $ErrorActionPreference='Stop'
          $map=@{ scan='ak-scan.ps1'; rewrite='ak-rewrite.ps1'; fix='ak-fixloop.ps1'; test='ak-test.ps1'; fixloop='ak-fixloop.ps1' }
          $cmd='${{ steps.parse.outputs.cmd }}'
          if(-not $map.ContainsKey($cmd)){ "Unknown: $cmd" | Tee-Object .ak-out.txt -Append; exit 10 }

          $cand=@(
            Join-Path 'scripts/g5' $map[$cmd],
            Join-Path 'scripts'    $map[$cmd],
            $map[$cmd]
          ) | ? { Test-Path $_ } | Select-Object -First 1
          if(-not $cand){ "Script not found: $($map[$cmd])" | Tee-Object .ak-out.txt -Append; exit 11 }

          $supportsMode = try { (Get-Command $cand -ErrorAction Stop).Parameters.ContainsKey('Mode') } catch { $false }
          $args=@(); if($supportsMode){ $args += @('-Mode',$env:AK_MODE) }

          ">> Running $cand $args" | Tee-Object .ak-out.txt -Append
          try { & pwsh -NoProfile -File $cand @args 2>&1 | Tee-Object .ak-out.txt -Append; $code=$LASTEXITCODE }
          catch { $_ | Out-String | Tee-Object .ak-out.txt -Append; $code=1 }
          "exit_code=$code" | Out-File $env:GITHUB_OUTPUT -Append
          if($code -ne 0){ Write-Error "AK step failed with code $code" }

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ak7-logs
          path: |
            .ak-out.txt
            logs/**/*.log
          if-no-files-found: ignore

      - name: Reply with tail
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
        env:
          CMD:  ${{ steps.parse.outputs.cmd }}
          MODE: ${{ steps.parse.outputs.mode }}
        script: |
          const fs = require('fs');
          const tail = fs.readFileSync('.ak-out.txt','utf8').split('\n').slice(-100).join('\n');
          await github.rest.issues.createComment({
            owner: context.repo.owner, repo: context.repo.repo,
            issue_number: context.payload.issue.number,
            body: `✅ \`/ak\` done (${process.env.CMD} ${process.env.MODE})\n\n\`\`\`\n${tail}\n\`\`\``
          });
