name: Release One-Click

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'vX.Y.Z (e.g. v1.0.14)'
        required: true
      notes:
        description: 'Release notes (optional)'
        required: false
        default: ''
      auto_bump:
        description: 'Auto bump patch if tag exists'
        required: false
        default: 'false'
      run_gates:
        description: 'Run Windows gates/canary (ak-scan/test)'
        required: false
        default: 'true'

permissions:
  contents: write

jobs:
  gates:
    if: ${{ inputs.run_gates == 'true' }}
    runs-on: windows-latest
    timeout-minutes: 20
    steps:
      - name: Pre-configure Git (kill exit 128)
        shell: pwsh
        run: |
          # 홈 디렉터리를 명시적으로 잡아주면 전역 설정 읽기 실패를 방지
          if (-not $env:HOME -or -not (Test-Path $env:HOME)) { $env:HOME = $env:USERPROFILE }
          git --version
          # 안전 디렉터리 전역 허용 + 워크스페이스 경로(정/역슬래시 둘 다, 실경로) 모두 등록
          git config --global --add safe.directory '*'
          $ws = $env:GITHUB_WORKSPACE
          if ($ws) {
            git config --global --add safe.directory "$ws"
            git config --global --add safe.directory ($ws -replace '\\','/')
            try {
              $rp = (Resolve-Path $ws -ErrorAction Stop).Path
              git config --global --add safe.directory "$rp"
              git config --global --add safe.directory ($rp -replace '\\','/')
            } catch {}
          }
          git config --global --list
          # 사전 검증: 빈 레포 폴더 만들어서 git 동작 체크(실패면 바로 비정상 환경)
          $tmp = Join-Path $env:RUNNER_TEMP 'g0'
          Remove-Item $tmp -Recurse -Force -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Force -Path $tmp | Out-Null
          pushd $tmp
          git init .
          if ($LASTEXITCODE -ne 0) { throw "pre-check git init failed: $LASTEXITCODE" }
          popd

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false

      - name: Run gates (ak-scan + ak-test)
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          & "scripts/g5/ak-scan.ps1" -Pr "0" -Sha "${{ github.sha }}" -ConfirmApply:$false
          if ($LASTEXITCODE -ne 0) { throw "ak-scan failed with code $LASTEXITCODE" }
          & "scripts/g5/ak-test.ps1" -Pr "0" -Sha "${{ github.sha }}" -ConfirmApply:$false
          if ($LASTEXITCODE -ne 0) { throw "ak-test failed with code $LASTEXITCODE" }

  release:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Compute version (validate / optional auto bump)
        id: v
        uses: actions/github-script@v7
        env:
          IN_VERSION: ${{ inputs.version }}
          AUTO_BUMP: ${{ inputs.auto_bump }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const input = (process.env.IN_VERSION || '').trim();
            const auto  = (process.env.AUTO_BUMP || '').toLowerCase() === 'true';
            if (!/^v\d+\.\d+\.\d+$/.test(input)) { core.setFailed(`bad version: ${input}`); return; }
            let ver = input;
            async function exists(tag) {
              try {
                await github.rest.git.getRef({ owner: context.repo.owner, repo: context.repo.repo, ref: `tags/${tag}` });
                return true;
              } catch (e) { if (e.status === 404) return false; throw e; }
            }
            if (await exists(ver)) {
              if (!auto) { core.setFailed(`tag already exists: ${ver}`); return; }
              const m = ver.match(/^v(\d+)\.(\d+)\.(\d+)$/);
              let [_, maj, min, pat] = m;
              let major = Number(maj), minor = Number(min), patch = Number(pat);
              do { patch += 1; } while (await exists(`v${major}.${minor}.${patch}`));
              ver = `v${major}.${minor}.${patch}`;
              core.notice(`auto-bump -> ${ver}`);
            }
            core.setOutput('version', ver);

      - name: Publish release (API only)
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.v.outputs.version }}
          target_commitish: ${{ github.sha }}
          body: ${{ inputs.notes }}
          generate_release_notes: true

  canary:
    if: ${{ inputs.run_gates == 'true' }}
    runs-on: windows-latest
    needs: release
    timeout-minutes: 20
    steps:
      - name: Pre-configure Git (kill exit 128)
        shell: pwsh
        run: |
          if (-not $env:HOME -or -not (Test-Path $env:HOME)) { $env:HOME = $env:USERPROFILE }
          git --version
          git config --global --add safe.directory '*'
          $ws = $env:GITHUB_WORKSPACE
          if ($ws) {
            git config --global --add safe.directory "$ws"
            git config --global --add safe.directory ($ws -replace '\\','/')
            try {
              $rp = (Resolve-Path $ws -ErrorAction Stop).Path
              git config --global --add safe.directory "$rp"
              git config --global --add safe.directory ($rp -replace '\\','/')
            } catch {}
          }
          git config --global --list
          $tmp = Join-Path $env:RUNNER_TEMP 'g1'
          Remove-Item $tmp -Recurse -Force -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Force -Path $tmp | Out-Null
          pushd $tmp
          git init .
          if ($LASTEXITCODE -ne 0) { throw "pre-check git init failed: $LASTEXITCODE" }
          popd

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false

      - name: Run canary (ak-test)
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          & "scripts/g5/ak-test.ps1" -Pr "0" -Sha "${{ github.sha }}" -ConfirmApply:$false
          if ($LASTEXITCODE -ne 0) { throw "canary failed with code $LASTEXITCODE" }
