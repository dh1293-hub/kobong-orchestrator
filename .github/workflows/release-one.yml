name: Release One-Click

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'vX.Y.Z (e.g. v1.0.1)'
        required: true
      notes:
        description: 'Release notes (optional)'
        required: false
        default: ''
      auto_bump:
        description: 'Auto bump patch if tag exists'
        required: false
        default: 'false'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Validate & maybe bump via API
        id: validate
        uses: actions/github-script@v7
        env:
          VERSION: ${{ inputs.version }}
          AUTO_BUMP: ${{ inputs.auto_bump }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let ver = process.env.VERSION;
            const auto = (process.env.AUTO_BUMP || '').toLowerCase() === 'true';
            if (!/^v\d+\.\d+\.\d+$/.test(ver)) core.setFailed(`bad version: ${ver}`);
            async function exists(tag){
              try{ await github.rest.git.getRef({owner:context.repo.owner,repo:context.repo.repo,ref:`tags/${tag}`}); return true; }
              catch(e){ if(e.status===404) return false; throw e; }
            }
            if (await exists(ver)) {
              if (!auto) core.setFailed(`tag already exists: ${ver}`);
              const m = ver.match(/^v(\d+)\.(\d+)\.(\d+)$/); let [M,mn,p]=[+m[1],+m[2],+m[3]];
              do { p += 1; } while (await exists(`v${M}.${mn}.${p}`));
              ver = `v${M}.${mn}.${p}`; core.notice(`auto-bump -> ${ver}`);
            }
            core.exportVariable('VERSION', ver);
            core.setOutput('version', ver);
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          target_commitish: ${{ github.sha }}
          body: ${{ inputs.notes }}
          generate_release_notes: true
