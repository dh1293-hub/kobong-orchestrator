name: Release One-Click

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'vX.Y.Z (e.g. v1.0.0)'
        required: true
      notes:
        description: 'Release notes (optional)'
        required: false
        default: ''

permissions:
  contents: write

concurrency:
  group: release-one-click
  cancel-in-progress: false

jobs:
  release:
    name: Create tag & publish release (API-only)
    runs-on: ubuntu-latest
    steps:
      # 1) 버전 형식/중복 확인 (GitHub API 사용)
      - name: Validate version & uniqueness (API)
        id: validate
        uses: actions/github-script@v7
        env:
          VERSION: ${{ inputs.version }}     # ← workflow 입력을 env로 전달
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ver = process.env.VERSION;
            if (!ver) { core.setFailed('version input missing'); return; }
            if (!/^v\d+\.\d+\.\d+$/.test(ver)) {
              core.setFailed(`bad version: ${ver}`); return;
            }
            try {
              // 태그가 이미 있으면 실패 처리
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${ver}`,
              });
              core.setFailed(`tag already exists: ${ver}`); return;
            } catch (e) {
              // 404면 "태그 없음" → 통과
              if (e.status !== 404) throw e;
            }

      # 2) 릴리즈 생성 (태그 자동 생성)
      - name: Publish GitHub Release (auto-create tag)
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:         ${{ inputs.version }}   # 없으면 이 액션이 태그를 생성
          target_commitish: ${{ github.sha }}       # 현재 커밋에 태그
          body:            ${{ inputs.notes }}
          generate_release_notes: true
