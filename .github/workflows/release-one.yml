name: Release One-Click

on:
  workflow_dispatch: 

    inputs:
      version:
        description: 'vX.Y.Z (e.g. v1.0.14)'
        required: true
      notes:
        description: 'Release notes (optional)'
        required: false
        default: ''
      auto_bump:
        description: 'Auto bump patch if tag exists'
        required: false
        default: 'false'
      run_gates:
        description: 'Run Windows gates/canary (ak-scan/test)'
        required: false
        default: 'true'

permissions:
  contents: write

jobs:
  gates:
    if: ${{ inputs.run_gates == 'true' }}
    runs-on: windows-latest
    timeout-minutes: 20
    steps:
      - name: Download source (zipball) to workspace
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          SHA:  ${{ github.sha }}
        run: |
          $ErrorActionPreference='Stop'
          $zip = Join-Path $env:RUNNER_TEMP 'src.zip'
          $tmp = Join-Path $env:RUNNER_TEMP 'src-unzip'
          Remove-Item -Recurse -Force $tmp -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Force -Path $tmp | Out-Null

      - name: Mark stable tag (move)
        if: ${{ success() }}
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner, repo = context.repo.repo;
            const ref = 'refs/tags/stable';
            try { await github.rest.git.getRef({owner, repo, ref: 'tags/stable'}); 
                  await github.rest.git.updateRef({owner, repo, ref: 'tags/stable', sha: context.sha, force: true});
            } catch {
                  await github.rest.git.createRef({owner, repo, ref, sha: context.sha});
            }

          $headers = @{
            Authorization = "Bearer $env:GH_TOKEN"
            "User-Agent"  = "actions"
            "X-GitHub-Api-Version" = "2022-11-28"
          }
          $uri = "https://api.github.com/repos/$env:REPO/zipball/$env:SHA"
          Invoke-WebRequest -Uri $uri -Headers $headers -OutFile $zip -UseBasicParsing

          Expand-Archive -LiteralPath $zip -DestinationPath $tmp -Force

          # zipball은 최상위에 한 개 폴더(owner-repo-<sha>)가 생김 -> 그 안의 내용만 workspace로 이동
          $root = Get-ChildItem $tmp | Where-Object { $_.PSIsContainer } | Select-Object -First 1
          if (-not $root) { throw "zipball root not found" }
          New-Item -ItemType Directory -Force -Path $env:GITHUB_WORKSPACE | Out-Null
          Get-ChildItem -LiteralPath $root.FullName -Force | Move-Item -Destination $env:GITHUB_WORKSPACE -Force

      - name: Run gates (ak-scan + ak-test)
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          & "scripts/g5/ak-scan.ps1" -Pr "0" -Sha "${{ github.sha }}" -ConfirmApply:$false
          if ($LASTEXITCODE -ne 0) { throw "ak-scan failed with code $LASTEXITCODE" }
          & "scripts/g5/ak-test.ps1" -Pr "0" -Sha "${{ github.sha }}" -ConfirmApply:$false
          if ($LASTEXITCODE -ne 0) { throw "ak-test failed with code $LASTEXITCODE" }

  release:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Compute version (validate / optional auto bump)
        id: v
        uses: actions/github-script@v7
        env:
          IN_VERSION: ${{ inputs.version }}
          AUTO_BUMP: ${{ inputs.auto_bump }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const input = (process.env.IN_VERSION || '').trim();
            const auto  = (process.env.AUTO_BUMP || '').toLowerCase() === 'true';
            if (!/^v\d+\.\d+\.\d+$/.test(input)) { core.setFailed(`bad version: ${input}`); return; }
            let ver = input;
            async function exists(tag) {
              try {
                await github.rest.git.getRef({ owner: context.repo.owner, repo: context.repo.repo, ref: `tags/${tag}` });
                return true;
              } catch (e) { if (e.status === 404) return false; throw e; }
            }
            if (await exists(ver)) {
              if (!auto) { core.setFailed(`tag already exists: ${ver}`); return; }
              const m = ver.match(/^v(\d+)\.(\d+)\.(\d+)$/);
              let [_, maj, min, pat] = m;
              let major = Number(maj), minor = Number(min), patch = Number(pat);
              do { patch += 1; } while (await exists(`v${major}.${minor}.${patch}`));
              ver = `v${major}.${minor}.${patch}`;
              core.notice(`auto-bump -> ${ver}`);
            }
            core.setOutput('version', ver);

      - name: Publish release (API only)
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.v.outputs.version }}
          target_commitish: ${{ github.sha }}
          body: ${{ inputs.notes }}
          generate_release_notes: true

  canary:
    if: ${{ inputs.run_gates == 'true' }}
    runs-on: windows-latest
    needs: release
    timeout-minutes: 20
    steps:
      - name: Download source (zipball) to workspace
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          SHA:  ${{ github.sha }}
        run: |
          $ErrorActionPreference='Stop'
          $zip = Join-Path $env:RUNNER_TEMP 'src2.zip'
          $tmp = Join-Path $env:RUNNER_TEMP 'src2-unzip'
          Remove-Item -Recurse -Force $tmp -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Force -Path $tmp | Out-Null

          $headers = @{
            Authorization = "Bearer $env:GH_TOKEN"
            "User-Agent"  = "actions"
            "X-GitHub-Api-Version" = "2022-11-28"
          }
          $uri = "https://api.github.com/repos/$env:REPO/zipball/$env:SHA"
          Invoke-WebRequest -Uri $uri -Headers $headers -OutFile $zip -UseBasicParsing

          Expand-Archive -LiteralPath $zip -DestinationPath $tmp -Force
          $root = Get-ChildItem $tmp | Where-Object { $_.PSIsContainer } | Select-Object -First 1
          if (-not $root) { throw "zipball root not found" }
          New-Item -ItemType Directory -Force -Path $env:GITHUB_WORKSPACE | Out-Null
          Get-ChildItem -LiteralPath $root.FullName -Force | Move-Item -Destination $env:GITHUB_WORKSPACE -Force

      - name: Run canary (ak-test)
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          & "scripts/g5/ak-test.ps1" -Pr "0" -Sha "${{ github.sha }}" -ConfirmApply:$false
          if ($LASTEXITCODE -ne 0) { throw "canary failed with code $LASTEXITCODE" }
