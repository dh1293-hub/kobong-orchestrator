name: Release One-Click

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'vX.Y.Z (예: v1.0.1)'
        required: true
      notes:
        description: 'Release notes (optional)'
        required: false
        default: ''
      auto_bump:
        description: '태그가 있으면 패치 자동 증가'
        required: false
        default: 'false'
      run_gates:
        description: 'Windows 게이트/카나리 실행'
        required: false
        default: 'true'

permissions:
  contents: write

concurrency:
  group: release-one-${{ github.ref }}
  cancel-in-progress: false

jobs:
  gates:
    if: ${{ inputs.run_gates == 'true' }}
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Pre-release gates (AK scan/test) — soft warnings
        shell: pwsh
        working-directory: ${{ github.workspace }}
        continue-on-error: true
        run: |
          & "scripts/g5/ak-scan.ps1" -Pr "0" -Sha "${{ github.sha }}" -ConfirmApply:$false
          & "scripts/g5/ak-test.ps1" -Pr "0" -Sha "${{ github.sha }}" -ConfirmApply:$false

  release:
    runs-on: ubuntu-latest
    needs: gates
    steps:
      - name: Validate version / maybe auto-bump (API)
        id: v
        uses: actions/github-script@v7
        env:
          IN_VERSION: ${{ inputs.version }}
          AUTO_BUMP: ${{ inputs.auto_bump }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const input = (process.env.IN_VERSION || '').trim();
            const auto  = (process.env.AUTO_BUMP || '').toLowerCase() === 'true';
            if (!/^v\d+\.\d+\.\d+$/.test(input)) { core.setFailed(`bad version: ${input}`); return; }

            let ver = input;
            async function exists(tag) {
              try {
                await github.rest.git.getRef({ owner: context.repo.owner, repo: context.repo.repo, ref: `tags/${tag}` });
                return true;
              } catch (e) {
                if (e.status === 404) return false;
                throw e;
              }
            }

            if (await exists(ver)) {
              if (!auto) { core.setFailed(`tag already exists: ${ver}`); return; }
              const mt = ver.match(/^v(\d+)\.(\d+)\.(\d+)$/);
              let major = Number(mt[1]), minor = Number(mt[2]), patch = Number(mt[3]);
              do { patch += 1; } while (await exists(`v${major}.${minor}.${patch}`));
              ver = `v${major}.${minor}.${patch}`;
              core.notice(`auto-bump -> ${ver}`);
            }

            core.setOutput('version', ver);

      - name: Create tag & publish release (API-only)
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:         ${{ steps.v.outputs.version }}
          target_commitish: ${{ github.sha }}
          body:             ${{ inputs.notes }}
          generate_release_notes: true

  canary:
    if: ${{ inputs.run_gates == 'true' }}
    runs-on: windows-latest
    needs: release
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Post-release canary — soft warnings
        shell: pwsh
        working-directory: ${{ github.workspace }}
        continue-on-error: true
        run: |
          & "scripts/g5/ak-test.ps1" -Pr "0" -Sha "${{ github.sha }}" -ConfirmApply:$false
