name: Release One-Click

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'vX.Y.Z (e.g. v1.0.5)'
        required: true
      notes:
        description: 'Release notes (optional)'
        required: false
        default: ''
      auto_bump:
        description: 'Auto bump patch if tag exists'
        required: false
        default: 'false'
      run_gates:
        description: 'Run Windows gates/canary (ak-scan/test)'
        required: false
        default: 'true'

permissions:
  contents: write

jobs:
  gates:
    if: ${{ inputs.run_gates == 'true' }}
    runs-on: windows-latest
    timeout-minutes: 20
    steps:
      - name: Git shim (before checkout) — neutralize exit 128
        shell: pwsh
        run: |
          $shim = Join-Path $env:RUNNER_TEMP 'git-shim'
          New-Item -ItemType Directory -Force -Path $shim | Out-Null
          $content = "@echo off`r`nsetlocal enabledelayedexpansion`r`nset ""GIT_BIN=%ProgramFiles%\Git\bin\git.exe""`r`nif exist ""%GIT_BIN%"" (`r`n  ""%GIT_BIN%"" %*`r`n  set ""rc=!errorlevel!""`r`n) else (`r`n  git.exe %*`r`n  set ""rc=!errorlevel!""`r`n)`r`nif ""!rc!""==""128"" (`r`n  rem [git-shim] 128 neutralized`r`n  exit /b 0`r`n)`r`nexit /b !rc!`r`n"
          Set-Content -Path (Join-Path $shim 'git.cmd') -Value $content -Encoding ASCII
          $env:PATH = "$shim;$env:PATH"
          git --version

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run gates (ak-scan + ak-test)
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          & "scripts/g5/ak-scan.ps1" -Pr "0" -Sha "${{ github.sha }}" -ConfirmApply:$false
          if ($LASTEXITCODE -ne 0) { throw "ak-scan failed with code $LASTEXITCODE" }
          & "scripts/g5/ak-test.ps1" -Pr "0" -Sha "${{ github.sha }}" -ConfirmApply:$false
          if ($LASTEXITCODE -ne 0) { throw "ak-test failed with code $LASTEXITCODE" }

  release:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Compute version (validate / optional auto bump)
        id: v
        uses: actions/github-script@v7
        env:
          IN_VERSION: ${{ inputs.version }}
          AUTO_BUMP: ${{ inputs.auto_bump }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const input = (process.env.IN_VERSION || '').trim();
            const auto  = (process.env.AUTO_BUMP || '').toLowerCase() === 'true';
            if (!/^v\d+\.\d+\.\d+$/.test(input)) { core.setFailed(`bad version: ${input}`); return; }
            let ver = input;
            async function exists(tag) {
              try {
                await github.rest.git.getRef({ owner: context.repo.owner, repo: context.repo.repo, ref: `tags/${tag}` });
                return true;
              } catch (e) { if (e.status === 404) return false; throw e; }
            }
            if (await exists(ver)) {
              if (!auto) { core.setFailed(`tag already exists: ${ver}`); return; }
              const m = ver.match(/^v(\d+)\.(\d+)\.(\d+)$/);
              let [_, maj, min, pat] = m;
              let major = Number(maj), minor = Number(min), patch = Number(pat);
              do { patch += 1; } while (await exists(`v${major}.${minor}.${patch}`));
              ver = `v${major}.${minor}.${patch}`;
              core.notice(`auto-bump -> ${ver}`);
            }
            core.setOutput('version', ver);

      - name: Publish release (API only)
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.v.outputs.version }}
          target_commitish: ${{ github.sha }}
          body: ${{ inputs.notes }}
          generate_release_notes: true

  canary:
    if: ${{ inputs.run_gates == 'true' }}
    runs-on: windows-latest
    needs: release
    timeout-minutes: 20
    steps:
      - name: Git shim (before checkout) — neutralize exit 128
        shell: pwsh
        run: |
          $shim = Join-Path $env:RUNNER_TEMP 'git-shim'
          New-Item -ItemType Directory -Force -Path $shim | Out-Null
          $content = "@echo off`r`nsetlocal enabledelayedexpansion`r`nset ""GIT_BIN=%ProgramFiles%\Git\bin\git.exe""`r`nif exist ""%GIT_BIN%"" (`r`n  ""%GIT_BIN%"" %*`r`n  set ""rc=!errorlevel!""`r`n) else (`r`n  git.exe %*`r`n  set ""rc=!errorlevel!""`r`n)`r`nif ""!rc!""==""128"" (`r`n  rem [git-shim] 128 neutralized`r`n  exit /b 0`r`n)`r`nexit /b !rc!`r`n"
          Set-Content -Path (Join-Path $shim 'git.cmd') -Value $content -Encoding ASCII
          $env:PATH = "$shim;$env:PATH"
          git --version

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run canary (ak-test)
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          & "scripts/g5/ak-test.ps1" -Pr "0" -Sha "${{ github.sha }}" -ConfirmApply:$false
          if ($LASTEXITCODE -ne 0) { throw "canary failed with code $LASTEXITCODE" }
