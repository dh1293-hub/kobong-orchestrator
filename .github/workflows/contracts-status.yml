# NO-SHELL
name: contracts-status
on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
permissions:
  checks: read
  contents: read
  actions: read
  pull-requests: read
jobs:
  summary:
    name: summarize contract checks
    runs-on: ubuntu-latest
    steps:
      - name: Summarize required check-runs (tolerant)
        uses: actions/github-script@v7
        with:
          script: |
            const wanted = ["contracts/contract-tests","contract-tests/contract"];
            const sha = (context.payload.pull_request && context.payload.pull_request.head && context.payload.pull_request.head.sha) || context.sha;
            const res = await github.request("GET /repos/{owner}/{repo}/commits/{ref}/check-runs", {
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: sha,
              headers: { "X-GitHub-Api-Version": "2022-11-28" }
            });
            const runs = (res && res.data && Array.isArray(res.data.check_runs)) ? res.data.check_runs : [];
            core.notice(`Found ${runs.length} check runs for ${sha}`);
            const byName = new Map();
            for (const r of runs) {
              if (!r || !r.name) continue;
              const arr = byName.get(r.name) || [];
              arr.push(r); byName.set(r.name, arr);
            }
            const failing = [];
            for (const w of wanted) {
              const arr = byName.get(w);
              if (!arr || arr.length === 0) {
                core.warning(`Missing check: ${w} (ignored)`);
                continue;
              }
              const ok = arr.some(r => r.conclusion === "success");
              core.info(`${w}: ${arr.map(r=>r.conclusion).join(", ")}`);
              if (!ok) failing.push(w);
            }
            if (failing.length > 0) {
              core.setFailed(`Failing checks: ${failing.join(", ")}`);
            } else {
              core.notice("contracts-status: OK");
            }