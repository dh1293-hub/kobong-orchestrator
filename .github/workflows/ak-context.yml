name: AK · /ak context reply
on:
  issue_comment:
    types: [created]
  workflow_dispatch: {}
permissions:
  issues: write
  pull-requests: write

jobs:
  reply:
    if: contains(github.event.comment.body, '/ak context') || github.event_name == 'workflow_dispatch'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate GPT-5 context (PowerShell 7)
        shell: pwsh
        run: |
          # 1) 컨텍스트 생성(없어도 안전): MOCK 기준
          if (Test-Path 'scripts/g5/make-g5-context.ps1') {
            pwsh -NoProfile -File scripts/g5/make-g5-context.ps1 -Mode MOCK
          }
          # 2) 파일 있으면 사용, 없으면 즉석 요약
          if (Test-Path '.kobong/context/context-latest.txt') {
            $ctx = Get-Content .kobong/context/context-latest.txt -Raw
          } else {
            $ctx = @()
            $ctx += "GPT-5 CONTEXT (fallback) · $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
            $ctx += "Repo: $((git rev-parse --show-toplevel 2>$null) ?? (Get-Location).Path)"
            $ctx += "Last Commit: $(git log --oneline -n 1 2>$null)"
            $ctx = $ctx -join "`n"
          }
          $ctx | Out-File -FilePath ctx.txt -Encoding utf8
          '::add-mask::{0}' -f $ctx | Out-Host
          echo "G5_CONTEXT<<EOF" >> $env:GITHUB_ENV
          Get-Content ctx.txt -Raw        >> $env:GITHUB_ENV
          echo "EOF"                       >> $env:GITHUB_ENV

      - name: Reply with context
        uses: actions/github-script@v7
        with:
          script: |
            const body = process.env.G5_CONTEXT || 'no context';
            const issue = context.payload.issue || context.payload.pull_request || context.issue;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue ? issue.number : context.issue.number,
              body: ['### GPT-5 CONTEXT','```txt', body.substring(0, 60000), '```'].join('\n')
            });
