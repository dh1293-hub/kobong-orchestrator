name: z10-ak-exec

on:
  issue_comment:
    types: [created]        # 댓글 달리면 항상 뜸 (PR 대화 댓글 포함)

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  exec:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      # 1) /ak 감지 + 이슈 번호 확보 (PowerShell로 간단/안정)
      - id: gate
        shell: pwsh
        run: |
          $body = @"
          ${{ github.event.comment.body }}
          "@.Trim()
          if ($body -match '(?is)(^|[\s`>])/ak(\b|[\s`])') { $isAK='1' } else { $isAK='0' }
          "isAK=$isAK"                              | Out-File $env:GITHUB_OUTPUT -Append
          "issue=${{ github.event.issue.number }}"  | Out-File $env:GITHUB_OUTPUT -Append
          "body=$body"                              | Out-File $env:GITHUB_OUTPUT -Append
          New-Item -ItemType File -Force .ak-out.txt | Out-Null

      # 2) ACK
      - name: ack
        if: ${{ steps.gate.outputs.isAK == '1' && steps.gate.outputs.issue != '' }}
        uses: actions/github-script@v7
        env:
          ISSUE: ${{ steps.gate.outputs.issue }}
          BODY:  ${{ steps.gate.outputs.body }}
        with:
          github-token: ${{ github.token }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: Number(process.env.ISSUE),
              body: `ack ✅ ${process.env.BODY}`
            });

      # 3) /ak [cmd] [mode] 파싱
      - name: parse
        if: ${{ steps.gate.outputs.isAK == '1' }}
        id: parse
        shell: pwsh
        run: |
          $p = "${{ steps.gate.outputs.body }}".Trim().Split(' ',[System.StringSplitOptions]::RemoveEmptyEntries)
          "cmd=$($p[1] ?? 'scan')"     | Out-File $env:GITHUB_OUTPUT -Append
          "mode=$($p[2] ?? 'preview')" | Out-File $env:GITHUB_OUTPUT -Append

      # 4) PowerShell 실행 (ak-scan.ps1 등)
      - name: run
        if: ${{ steps.gate.outputs.isAK == '1' }}
        shell: pwsh
        env:
          CMD:  ${{ steps.parse.outputs.cmd }}
          MODE: ${{ steps.parse.outputs.mode }}
        run: |
          Set-StrictMode -Version Latest; $ErrorActionPreference='Stop'
          $map=@{
            scan     = 'ak-scan.ps1'
            rewrite  = 'ak-rewrite.ps1'
            fix      = 'ak-fixloop.ps1'
            test     = 'ak-test.ps1'
            dispatch = 'ak-dispatch.ps1'
          }
          if(-not $map.ContainsKey($env:CMD)){
            "Unknown command: $env:CMD" | Tee-Object .ak-out.txt -Append; exit 10
          }
          $want=$map[$env:CMD]

          # scripts/g5 → scripts → 루트 → 마지막 전체검색
          $cand=@(
            Join-Path 'scripts/g5' $want,
            Join-Path 'scripts'    $want,
            $want
          ) | Where-Object { Test-Path $_ }
          if(-not $cand){
            $found = Get-ChildItem -Recurse -File -Filter $want | Select-Object -First 1 -Expand FullName
            if($found){ $cand=@($found) }
          }
          if(-not $cand){
            "Script not found: $want" | Tee-Object .ak-out.txt -Append; exit 11
          }

          $script = $cand[0]
          $supportsMode = try { (Get-Command $script -ErrorAction Stop).Parameters.ContainsKey('Mode') } catch { $false }
          $args=@(); if($supportsMode){ $args += @('-Mode',$env:MODE) }

          ">> Running $script $args" | Tee-Object .ak-out.txt -Append
          try {
            & pwsh -NoProfile -ExecutionPolicy Bypass -File $script @args 2>&1 | Tee-Object .ak-out
