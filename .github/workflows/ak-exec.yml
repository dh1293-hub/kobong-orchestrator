name: AK7 exec (windows + tail)

on:
  issue_comment:               { types: [created, edited] }
  pull_request_review_comment: { types: [created, edited] }
  workflow_dispatch:
    inputs:
      issue_number: { description: "Issue/PR number", required: true }
      body:         { description: "Comment body to simulate", required: true }

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

jobs:
  exec:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Gate (/ak only) + resolve target
        id: gate
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const ev = context.eventName;
            const body = (ev === 'workflow_dispatch')
              ? core.getInput('body', {required:true})
              : (context.payload.comment?.body ?? '');
            const re = /(^|[\s`>])\/ak(\b|[\s`])/i;   // 여유 있는 매칭
            const isAK = re.test(body);
            let issue = (ev === 'workflow_dispatch')
              ? Number(core.getInput('issue_number', {required:true}))
              : (context.payload.issue?.number
                ?? context.payload.pull_request?.number
                ?? (() => {
                     const u = context.payload.comment?.pull_request_url || '';
                     const m = u.match(/\/pulls\/(\d+)(?:$|[/?#])/);
                     return m ? Number(m[1]) : undefined;
                   })());
            core.setOutput('isAK', isAK ? '1':'0');
            core.setOutput('issue', issue ?? '');
            core.setOutput('body', body);

      - name: Parse command
        if: ${{ steps.gate.outputs.isAK == '1' }}
        id: parse
        shell: pwsh
        run: |
          $p = "${{ steps.gate.outputs.body }}".Trim().Split(' ',[System.StringSplitOptions]::RemoveEmptyEntries)
          "cmd=$($p[1] ?? 'scan')"     | Out-File $env:GITHUB_OUTPUT -Append
          "mode=$($p[2] ?? 'preview')" | Out-File $env:GITHUB_OUTPUT -Append
          New-Item -ItemType File -Force .ak-out.txt | Out-Null

      - name: Run AK script
        if: ${{ steps.gate.outputs.isAK == '1' }}
        id: runstep
        shell: pwsh
        env: { AK_MODE: ${{ steps.parse.outputs.mode }} }
        run: |
          Set-StrictMode -Version Latest; $ErrorActionPreference='Stop'
          $map=@{ scan='ak-scan.ps1'; rewrite='ak-rewrite.ps1'; fix='ak-fixloop.ps1'; test='ak-test.ps1'; fixloop='ak-fixloop.ps1' }
          $cmd='${{ steps.parse.outputs.cmd }}'
          if(-not $map.ContainsKey($cmd)){ "Unknown: $cmd" | Tee-Object .ak-out.txt -Append; exit 10 }
          $cand=@( Join-Path 'scripts/g5' $map[$cmd], Join-Path 'scripts' $map[$cmd], $map[$cmd] ) | ? { Test-Path $_ } | Select-Object -First 1
          if(-not $cand){ "Script not found: $($map[$cmd])" | Tee-Object .ak-out.txt -Append; exit 11 }
          $supportsMode = try { (Get-Command $cand -ErrorAction Stop).Parameters.ContainsKey('Mode') } catch { $false }
          $args=@(); if($supportsMode){ $args += @('-Mode',$env:AK_MODE) }
          ">> Running $cand $args" | Tee-Object .ak-out.txt -Append
          try { & pwsh -NoProfile -File $cand @args 2>&1 | Tee-Object .ak-out.txt -Append; $code=$LASTEXITCODE } catch { $_ | Out-String | Tee-Object .ak-out.txt -Append; $code=1 }
          "exit_code=$code" | Out-File $env:GITHUB_OUTPUT -Append
          if($code -ne 0){ Write-Error "AK exec failed with $code" }

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ak7-logs
          path: |
            .ak-out.txt
            logs/**/*.log
          if-no-files-found: ignore

      - name: Tail reply
        if: ${{ steps.gate.outputs.isAK == '1' && steps.gate.outputs.issue != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
        env:
          ISSUE: ${{ steps.gate.outputs.issue }}
        script: |
          const fs = require('fs');
          let tail='(no .ak-out.txt)'; try { tail = fs.readFileSync('.ak-out.txt','utf8').split('\n').slice(-100).join('\n'); } catch {}
          await github.rest.issues.createComment({
            owner: context.repo.owner, repo: context.repo.repo,
            issue_number: Number(process.env.ISSUE),
            body: `✅ exec done\n\n\`\`\`\n${tail}\n\`\`\``
          });

      - name: Not /ak (skip)
        if: ${{ steps.gate.outputs.isAK != '1' }}
        run: echo "not /ak — skip exec"
