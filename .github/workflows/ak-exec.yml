name: AK7 exec (self-contained)

on:
  issue_comment:               { types: [created, edited] }
  pull_request_review_comment: { types: [created, edited] }
  workflow_dispatch:
    inputs:
      issue_number: { description: "Issue/PR number", required: true }
      body:         { description: "Comment body to simulate", required: true }

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

jobs:
  exec:
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      # === 게이트: /ak 감지 + 타깃 이슈 계산 + 요약 ===
      - name: Gate
        id: gate
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const ev   = context.eventName;
            const body = ev==='workflow_dispatch'
              ? core.getInput('body', {required:true})
              : (context.payload.comment?.body ?? '');
            const isAK = /(^|[\s`>])\/ak(\b|[\s`])/i.test(body);
            let issue = ev==='workflow_dispatch'
              ? Number(core.getInput('issue_number', {required:true}))
              : (context.payload.issue?.number
                 ?? context.payload.pull_request?.number
                 ?? (() => {
                      const u = context.payload.comment?.pull_request_url || '';
                      const m = u.match(/\/pulls?\/(\d+)(?:$|[/?#])/);
                      return m ? Number(m[1]) : undefined;
                    })());
            core.setOutput('isAK',  isAK ? '1' : '0');
            core.setOutput('issue', issue ?? '');
            core.setOutput('body',  body);
            core.summary.addHeading('exec gate');
            core.summary.addTable([
              [{data:'event', header:true}, {data:ev}],
              [{data:'isAK',  header:true}, {data:String(isAK)}],
              [{data:'issue', header:true}, {data:String(issue)}],
              [{data:'body',  header:true}, {data:body.slice(0,200)}],
            ]);
            await core.summary.write();

      # === ACK ===
      - name: ACK (when /ak)
        if: ${{ steps.gate.outputs.isAK == '1' && steps.gate.outputs.issue != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: Number('${{ steps.gate.outputs.issue }}'),
              body: `ack ✅ ${{ toJson(steps.gate.outputs.body) }}`
            });

      - uses: actions/checkout@v4

      # === 파싱 ===
      - name: Parse /ak
        if: ${{ steps.gate.outputs.isAK == '1' }}
        id: parse
        shell: pwsh
        run: |
          $p = "${{ steps.gate.outputs.body }}".Trim().Split(' ',[System.StringSplitOptions]::RemoveEmptyEntries)
          "cmd=$($p[1] ?? 'scan')"     | Out-File $env:GITHUB_OUTPUT -Append
          "mode=$($p[2] ?? 'preview')" | Out-File $env:GITHUB_OUTPUT -Append
          New-Item -ItemType File -Force .ak-out.txt | Out-Null

      # === 실행 ===
      - name: Run AK script
        if: ${{ steps.gate.outputs.isAK == '1' }}
        id: runstep
        shell: pwsh
        env: { AK_MODE: ${{ steps.parse.outputs.mode }} }
        run: |
          Set-StrictMode -Version Latest; $ErrorActionPreference='Stop'
          $map=@{
            scan     = 'ak-scan.ps1'
            rewrite  = 'ak-rewrite.ps1'
            fix      = 'ak-fixloop.ps1'
            test     = 'ak-test.ps1'
            dispatch = 'ak-dispatch.ps1'
          }
          $cmd='${{ steps.parse.outputs.cmd }}'
          if(-not $map.ContainsKey($cmd)){
            "Unknown command: $cmd" | Tee-Object .ak-out.txt -Append; exit 10
          }
          $want=$map[$cmd]
          $candidates=@(
            Join-Path 'scripts/g5' $want,
            Join-Path 'scripts'    $want,
            $want
          ) | Where-Object { Test-Path $_ }
          if(-not $candidates){
            $found = Get-ChildItem -Recurse -File -Filter $want | Select-Object -First 1 -Expand FullName
            if($found){ $candidates=@($found) }
          }
          if(-not $candidates){
            "Script not found: $want" | Tee-Object .ak-out.txt -Append; exit 11
          }
          $script = $candidates[0]
          $supportsMode = try { (Get-Command $script -ErrorAction Stop).Parameters.ContainsKey('Mode') } catch { $false }
          $args=@(); if($supportsMode){ $args += @('-Mode',$env:AK_MODE) }
          ">> Running $script $args" | Tee-Object .ak-out.txt -Append
          try {
            & pwsh -NoProfile -ExecutionPolicy Bypass -File $script @args 2>&1 | Tee-Object .ak-out.txt -Append
            $code = $LASTEXITCODE
          } catch {
            $_ | Out-String | Tee-Object .ak-out.txt -Append
            $code = 1
          }
          "exit_code=$code" | Out-File $env:GITHUB_OUTPUT -Append
          if($code -ne 0){ Write-Error "AK exec failed with $code" }

      # === 로그 & 꼬리 ===
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ak7-logs
          path: |
            .ak-out.txt
            logs/**/*.log
          if-no-files-found: ignore

      - name: Tail reply
        if: always() && steps.gate.outputs.issue != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
        env:
          ISSUE: ${{ steps.gate.outputs.issue }}
        script: |
          const fs = require('fs');
          let tail='(no .ak-out.txt)';
          try { tail = fs.readFileSync('.ak-out.txt','utf8').split('\n').slice(-100).join('\n'); } catch {}
          await github.rest.issues.createComment({
            owner: context.repo.owner, repo: context.repo.repo,
            issue_number: Number(process.env.ISSUE),
            body: `✅ exec done\n\n\`\`\`\n${tail}\n\`\`\``
          })
