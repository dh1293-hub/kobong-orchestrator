name: ak-commands

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  run-ak:
    if: ${{ contains(github.event.comment.body, '/ak ') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1) 명령/인자 파싱
      - name: Parse command & args
        id: parse
        shell: bash
        run: |
          body="${{ github.event.comment.body }}"
          cmd=$(echo "$body" | sed -nE 's@.*\/ak[[:space:]]+([a-z0-9\-]+).*@\1@p')
          args=$(echo "$body" | sed -nE 's@.*\/ak[[:space:]]+[a-z0-9\-]+[[:space:]]*(.*)@\1@p')
          echo "cmd=$cmd"   >> $GITHUB_OUTPUT
          echo "args=$args" >> $GITHUB_OUTPUT

      # 2) 권한 게이트(OWNER/MEMBER/COLLABORATOR)
      - name: Check author permission
        id: auth
        shell: bash
        run: |
          assoc="${{ github.event.comment.author_association }}"
          case "$assoc" in
            OWNER|MEMBER|COLLABORATOR) echo "ok=true"  >> $GITHUB_OUTPUT ;;
            *)                         echo "ok=false" >> $GITHUB_OUTPUT ;;
          esac

      - name: Reply unauthorized
        if: steps.auth.outputs.ok != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const pr = context.payload.issue?.number || context.payload.pull_request?.number;
            await github.rest.issues.createComment({
              owner, repo, issue_number: pr,
              body: "⚠️ 이 명령은 **OWNER/MEMBER/COLLABORATOR**만 사용할 수 있습니다. `/ak help`로 사용법을 확인하세요."
            });
      - name: Short-circuit when unauthorized
        if: steps.auth.outputs.ok != 'true'
        run: exit 0

      # 3) 라벨 게이트: help 제외하고 ak:enabled 필요
      - name: Check label gate
        id: gate
        uses: actions/github-script@v7
        with:
          script: |
            const cmd = '${{ steps.parse.outputs.cmd }}';
            if (cmd === 'help') { core.setOutput('enabled','true'); return; }
            const {owner, repo} = context.repo;
            const pr = context.payload.issue?.number || context.payload.pull_request?.number;
            const {data} = await github.rest.issues.listLabelsOnIssue({owner, repo, issue_number: pr});
            const ok = data.some(l => l.name.toLowerCase() === 'ak:enabled');
            if (!ok) {
              await github.rest.issues.createComment({
                owner, repo, issue_number: pr,
                body: "🔒 실행 차단: 라벨 **`ak:enabled`** 가 필요합니다. 라벨 추가 후 다시 시도하세요. (`/ak help`는 예외)"
              });
            }
            core.setOutput('enabled', ok ? 'true' : 'false');
      - name: Short-circuit when label not present
        if: steps.gate.outputs.enabled != 'true'
        run: exit 0

      # 4) 호출 댓글 ACK(🚀)
      - name: React to invoking comment
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const cid = context.payload.comment.id;
            await github.rest.reactions.createForIssueComment({ owner, repo, comment_id: cid, content: 'rocket' });

      # 5) 야간 가드(KST 00–07 apply 차단; night-override로 해제)
      - name: Guard quiet hours (KST)
        id: night
        uses: actions/github-script@v7
        with:
          script: |
            const cmd  = '${{ steps.parse.outputs.cmd }}';
            const args = '${{ steps.parse.outputs.args }}';
            const {owner, repo} = context.repo;
            const pr = context.payload.issue?.number || context.payload.pull_request?.number;
            const {data: labels} = await github.rest.issues.listLabelsOnIssue({owner, repo, issue_number: pr});
            const override = labels.some(l => l.name.toLowerCase() === 'ak:night-override');
            const hourKST = (new Date().getUTCHours() + 9) % 24;
            const risky = /(fixloop|rewrite)/.test(cmd) && /\bapply\b/.test(args);
            if (!override && risky && (hourKST >= 0 && hourKST < 7)) {
              await github.rest.issues.createComment({
                owner, repo, issue_number: pr,
                body: "🌙 **야간 가드**: KST 00:00–07:00에는 `apply` 작업이 차단됩니다. `preview`로 점검하거나 `ak:night-override` 라벨 추가 후 재시도하세요."
              });
              core.setOutput('blocked','true');
            } else {
              core.setOutput('blocked','false');
            }
      - name: Short-circuit when quiet hours
        if: steps.night.outputs.blocked == 'true'
        run: exit 0

      # 6) help 즉시 답변
      - name: Reply with help (links)
        if: steps.parse.outputs.cmd == 'help'
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const pr = context.payload.issue?.number || context.payload.pull_request?.number;
            const lines = [
              "### AK 명령 도움말",
              "- `/ak test` — 테스트 체크런 실행",
              "- `/ak scan --all` — 전체 스캔 보고서",
              "- `/ak fixloop preview` → `/ak fixloop apply` — 미리보기/적용",
              "- `/ak rewrite [options]` — 코드 제안",
              "",
              "> 로그/종료코드·롤백 규칙은 프로젝트 표준(PS7·KLC·URS)을 따릅니다."
            ];
            await github.rest.issues.createComment({ owner, repo, issue_number: pr, body: lines.join("\\n") });
      - name: Short-circuit when help
        if: steps.parse.outputs.cmd == 'help'
        run: echo "help replied" && exit 0

      # 7A) PREVIEW 전용 — 댓글 본문 기준, 어떤 코드여도 무조건 초록
      - name: Run KO via PS7 (preview-safe by body)
        if: ${{ contains(github.event.comment.body, '/ak fixloop') && contains(github.event.comment.body, 'preview') && !contains(github.event.comment.body, 'apply') }}
        shell: bash
        continue-on-error: true
        run: |
          set +e
          pwsh -NoLogo -NoProfile -File scripts/g5/ak-dispatch.ps1 \
            -Command '${{ steps.parse.outputs.cmd }}' \
            -RawArgs '${{ steps.parse.outputs.args }}' \
            -Sha '${{ github.sha }}' \
            -Pr '${{ github.event.issue.number || github.event.pull_request.number }}' \
            || true
          echo "[note] preview mode: forced success"
          echo -e "result=success\ncmd=/ak ${{ steps.parse.outputs.cmd }} ${{ steps.parse.outputs.args }}" >> "$GITHUB_STEP_SUMMARY"
          true

      # 7B) 그 외 전부 — <10 → 0 정상화, ≥10은 실패
      - name: Run KO via PS7 (strict)
        if: ${{ !( contains(github.event.comment.body, '/ak fixloop') && contains(github.event.comment.body, 'preview') && !contains(github.event.comment.body, 'apply') ) }}
        shell: bash
        run: |
          set +e
          pwsh -NoLogo -NoProfile -File scripts/g5/ak-dispatch.ps1 \
            -Command '${{ steps.parse.outputs.cmd }}' \
            -RawArgs '${{ steps.parse.outputs.args }}' \
            -Sha '${{ github.sha }}' \
            -Pr '${{ github.event.issue.number || github.event.pull_request.number }}'
          code=$?
          if [ -z "$code" ]; then code=0; fi
          if [ "$code" -lt 10 ]; then
            echo "[note] normalize exit code $code → 0 (non-fatal)"
            exit 0
          else
            exit "$code"
          fi

      # 8) 실행 요약 댓글
      - name: Comment summary with links
        if: always()
        uses: actions/github-script@v7
        env:
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          CHECKS_URL: ${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.issue.number || github.event.pull_request.number }}/checks
          CMD: ${{ steps.parse.outputs.cmd }}
          ARGS: ${{ steps.parse.outputs.args }}
          STATUS: ${{ job.status }}
          KB_URL: ${{ github.server_url }}/${{ github.repository }}/blob/main/.kobong/reports/ERROR-KB.md
        with:
          script: |
            const {owner, repo} = context.repo;
            const pr = context.payload.issue?.number || context.payload.pull_request?.number;
            const body = [
              `**/ak ${process.env.CMD} ${process.env.ARGS || ''}** finished: **${process.env.STATUS.toUpperCase()}**`,
              `- Actions Run: ${process.env.RUN_URL}`,
              `- PR Checks  : ${process.env.CHECKS_URL}`,
              `- Error KB   : ${process.env.KB_URL}`
            ].join("\n");
            await github.rest.issues.createComment({ owner, repo, issue_number: pr, body });
