name: ak-commands

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  run-ak:
    if: ${{ contains(github.event.comment.body, '/ak ') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1) 명령 파싱
      - name: Parse command
        id: parse
        shell: bash
        run: |
          body="${{ github.event.comment.body }}"
          cmd=$(echo "$body" | sed -nE 's@.*\/ak[[:space:]]+([a-z0-9\-]+).*@\1@p')
          echo "cmd=$cmd" >> $GITHUB_OUTPUT

      # 2) 권한 게이트 (OWNER/MEMBER/COLLABORATOR만 허용)
      - name: Check author permission
        id: auth
        shell: bash
        run: |
          assoc="${{ github.event.comment.author_association }}"
          case "$assoc" in
            OWNER|MEMBER|COLLABORATOR) echo "ok=true"  >> $GITHUB_OUTPUT ;;
            *)                         echo "ok=false" >> $GITHUB_OUTPUT ;;
          esac

      # 3) 무권한이면 안내 댓글 후 종료
      - name: Reply unauthorized
        if: steps.auth.outputs.ok != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const pr = context.payload.issue?.number || context.payload.pull_request?.number;
            const body = [
              "⚠️ 이 명령은 저장소 **OWNER/MEMBER/COLLABORATOR**만 사용할 수 있습니다.",
              "필요 시 담당자에게 권한 요청 또는 `/ak help`로 사용법을 확인하세요."
            ].join("\n");
            await github.rest.issues.createComment({ owner, repo, issue_number: pr, body });
      - name: Short-circuit when unauthorized
        if: steps.auth.outputs.ok != 'true'
        run: exit 0

      # 4) 호출 댓글 ACK(리액션)
      - name: React to invoking comment
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const cid = context.payload.comment.id;
            await github.rest.reactions.createForIssueComment({
              owner, repo, comment_id: cid, content: 'rocket'
            });

      # 5) help면 링크형 도움말 바로 댓글 후 종료
      - name: Reply with help (links)
        if: steps.parse.outputs.cmd == 'help'
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const pr = context.payload.issue?.number || context.payload.pull_request?.number;
            const lines = [
              "### AK 명령 도움말",
              "- `/ak test` — 테스트 체크런 실행",
              "- `/ak scan --all` — 전체 스캔 보고서",
              "- `/ak fixloop preview` → `/ak fixloop apply` — 패치 미리보기/적용",
              "- `/ak rewrite` — 코드 제안(서제스트)",
              "",
              "> 로그/종료코드·롤백 규칙은 프로젝트 표준(PS7·KLC·URS)을 따릅니다."
            ];
            await github.rest.issues.createComment({ owner, repo, issue_number: pr, body: lines.join("\n") });
      - name: Short-circuit when help
        if: steps.parse.outputs.cmd == 'help'
        run: echo "help replied" && exit 0

      # 6) 실제 디스패치(PS7)
      - name: Run KO via PS7
        shell: pwsh
        run: |
          pwsh -NoLogo -NoProfile -File scripts/g5/ak-dispatch.ps1 `
            -Command "${{ steps.parse.outputs.cmd }}" `
            -Sha "${{ github.sha }}" `
            -Pr "${{ github.event.issue.number || github.event.pull_request.number }}"

      # 7) 실행 요약 댓글(항상)
      - name: Comment summary with links
        if: always()
        uses: actions/github-script@v7
        env:
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          CHECKS_URL: ${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.issue.number || github.event.pull_request.number }}/checks
          CMD: ${{ steps.parse.outputs.cmd }}
          STATUS: ${{ job.status }}
        with:
          script: |
            const {owner, repo} = context.repo;
            const pr = context.payload.issue?.number || context.payload.pull_request?.number;
            const body = [
              `**/ak ${process.env.CMD}** finished: **${process.env.STATUS.toUpperCase()}**`,
              `- Actions Run: ${process.env.RUN_URL}`,
              `- PR Checks: ${process.env.CHECKS_URL}`
            ].join("\n");
            await github.rest.issues.createComment({ owner, repo, issue_number: pr, body });
