import { ReportService } from "../../app/reporting/ReportService";
import type { ParsePort, QueryPort, RenderPort, Datasets, DslAst, Rows, ReportResult } from "../../domain/reporting/ports";
import { CsvRenderer } from "../../infra/reporting/CsvRenderer";
import { JsonRenderer } from "../../infra/reporting/JsonRenderer";
import { QueryStub } from "../../infra/reporting/QueryStub";

/** 초소형 파서: "from <name> select a,b,c [format=csv|json]" */
class MiniParser implements ParsePort {
  parse(dsl: string): DslAst {
    const from = /from\s+([A-Za-z0-9_-]+)/i.exec(dsl)?.[1] ?? "default";
    const cols = /select\s+([A-Za-z0-9_,\s]+)/i.exec(dsl)?.[1] ?? "";
    const columns = cols.split(",").map(s => s.trim()).filter(Boolean);
    const fmt = /format\s*=\s*(json|csv)/i.exec(dsl)?.[1]?.toLowerCase() as "json"|"csv"|undefined;
    return { from, columns, format: fmt };
  }
}

/** 포맷 스위칭 렌더러 */
class SwitchingRenderer implements RenderPort {
  constructor(private csv = new CsvRenderer(), private json = new JsonRenderer()) {}
  render(ast: DslAst, rows: Rows): ReportResult {
    const r = (ast.format === "json") ? this.json : this.csv;
    return r.render(ast, rows);
  }
}

/** 외부에서 필요시 사용할 수 있는 서비스 팩토리 */
export function makeReportService(): ReportService {
  const parser = new MiniParser();
  const query = new QueryStub();
  const renderer = new SwitchingRenderer();
  return new ReportService(parser, query, renderer);
}

/** CLI 진입점 */
export async function runCli(dsl: string, datasets: Datasets): Promise<string> {
  const svc = makeReportService();
  const res = await svc.run(dsl, datasets);
  return res.buffer ?? "";
}
