#requires -PSEdition Core
#requires -Version 7.0
param(
  [string] $ResultFile
)
Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

function Get-GitRoot { try { git rev-parse --show-toplevel 2>$null } catch { $null } }

# env/paths
$ROOT = $env:HAN_GPT5_ROOT
if (-not $ROOT) { $ROOT = Get-GitRoot }
if (-not $ROOT) { $ROOT = (Resolve-Path "$PSScriptRoot/..").Path }
if (-not (Test-Path $ROOT)) { throw "Invalid root: $ROOT" }
$env:HAN_GPT5_ROOT = $ROOT

$OUTDIR = $env:HAN_GPT5_OUT
if (-not $OUTDIR) { $OUTDIR = Join-Path $ROOT "out" }

# 기본 결과 경로
$DefaultResult = Join-Path $OUTDIR "report_result.dsl.json"

# 인자 해석(관대)
function LooksLikeFile([string]$s) {
  if ([string]::IsNullOrWhiteSpace($s)) { return $false }
  if ($s.Contains('\') -or $s.Contains('/')) { return $true }
  if ($s.EndsWith('.json',[System.StringComparison]::OrdinalIgnoreCase)) { return $true }
  return $false
}

if ([string]::IsNullOrWhiteSpace($ResultFile)) {
  $ResultFile = $DefaultResult
} elseif (-not (Test-Path $ResultFile)) {
  if (-not (LooksLikeFile $ResultFile)) {
    Write-Warning "Argument '$ResultFile' does not look like a file; using default result path."
    $ResultFile = $DefaultResult
  } else {
    # 상대 경로면 out\ 기준으로 재시도
    $maybe = Join-Path $OUTDIR $ResultFile
    if (Test-Path $maybe) { $ResultFile = $maybe }
  }
}

if (-not (Test-Path $ResultFile)) {
if (!(Test-Path $ResultFile)) {
  if ($env:GITHUB_ACTIONS -eq 'true') {
    # CI 환경: 모의 결과 생성 후 경고만 출력하고 통과
    New-Item -ItemType Directory -Force -Path (Split-Path $ResultFile) | Out-Null
    $mock = @{
      title   = 'report:sample'
      columns = @('id','name','active')
      rows    = @(@{id=1;name='alpha';active=$true}, @{id=2;name='beta';active=$false})
      format  = 'CSV'
    } | ConvertTo-Json -Depth 5
    [System.IO.File]::WriteAllText($ResultFile, $mock, [System.Text.UTF8Encoding]::new($false))
    Write-Warning "CI fallback: mock report_result.dsl.json created at $ResultFile"
  } else {
    throw "PRECONDITION: result JSON not found: $ResultFile"
  }
}
}

$res = Get-Content -LiteralPath $ResultFile -Raw -Encoding utf8 | ConvertFrom-Json

# 기본 필드 검증
if (-not ($res.title   -is [string]))   { throw "LOGIC: result.title invalid" }
if (-not ($res.format  -is [string]))   { throw "LOGIC: result.format invalid" }
if (-not ($res.columns -is [object[]])) { throw "LOGIC: result.columns invalid" }
foreach ($c in $res.columns) { if ($null -eq $c) { throw "LOGIC: result.columns has null" } }

# rows: 배열 또는 정수 모두 허용
$rowsCount = $null
$rowsArr   = $null
if ($res.PSObject.Properties.Name -contains 'rows') {
  if ($res.rows -is [object[]]) { $rowsArr = @($res.rows); $rowsCount = $rowsArr.Count }
  elseif ($res.rows -is [int] -or $res.rows -is [long]) { $rowsCount = [int]$res.rows }
  else { throw "LOGIC: result.rows type unsupported" }
} else {
  throw "LOGIC: result.rows missing"
}

# 추가 산출물 검증(가능할 때만)
if ($res.PSObject.Properties.Name -contains 'json') {
  $jsonPath = [string]$res.json
  if ($jsonPath) {
    if (-not (Test-Path $jsonPath)) { throw "LOGIC: result.json path not found: $jsonPath" }
    try {
      $dat = Get-Content -LiteralPath $jsonPath -Raw -Encoding utf8 | ConvertFrom-Json
      if ($dat -is [object[]]) {
        if (-not $rowsArr) { $rowsArr = @($dat) }
        if (-not $rowsCount) { $rowsCount = $dat.Count }
      }
    } catch { }
  }
}
if ($res.PSObject.Properties.Name -contains 'csv') {
  $csvPath = [string]$res.csv
  if ($csvPath -and -not (Test-Path $csvPath)) { throw "LOGIC: result.csv path not found: $csvPath" }
}

if ($null -eq $rowsCount -or $rowsCount -lt 0) { throw "LOGIC: result.rows invalid (no count)" }

Write-Host "[DEMO] OK —" `
  ("title={0} columns={1} rows={2} format={3}" -f $res.title, ($res.columns -join ','), $rowsCount, $res.format.ToUpperInvariant())
