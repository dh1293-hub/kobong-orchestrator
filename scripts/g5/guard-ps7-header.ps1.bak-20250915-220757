# APPLY IN SHELL
#requires -Version 7.0
param([switch]$ConfirmApply,[string]$Root)
Set-StrictMode -Version Latest
$ErrorActionPreference='Stop'
$PSDefaultParameterValues['Out-File:Encoding']='utf8'
$PSDefaultParameterValues['*:Encoding']='utf8'
if ($env:CONFIRM_APPLY -eq 'true') { $ConfirmApply = $true }

# === Preflight ===
$RepoRoot = if ($Root) { (Resolve-Path -LiteralPath $Root).Path } else { (git rev-parse --show-toplevel 2>$null) ?? (Get-Location).Path }
if (-not (Test-Path $RepoRoot)) { Write-Error "PRECONDITION: RepoRoot not found ‚Üí $RepoRoot"; exit 10 }
Set-Location $RepoRoot
$Branch = (git rev-parse --abbrev-ref HEAD 2>$null) ?? '<unknown>'
$now = [TimeZoneInfo]::ConvertTimeBySystemTimeZoneId((Get-Date),'Asia/Seoul').ToString('yyyy-MM-dd HH:mm:ss')
Write-Host ("`n[verify] PS7 headers on {0} @ {1} (KST)" -f $Branch,$now)

# === Lock (with stale auto-unlock) ===
$LockFile = Join-Path $RepoRoot '.gpt5.lock.ps7-headers'
if (Test-Path $LockFile) {
  try { $age = [int]((Get-Date) - (Get-Item $LockFile).LastWriteTime).TotalSeconds } catch { $age = 999999 }
  if ($age -ge 120) {
    $ts  = Get-Date -Format 'yyyyMMdd-HHmmss'
    $rot = "{0}.stale-{1}" -f $LockFile, $ts
    Move-Item -Force $LockFile $rot
    Write-Host ("[auto-unlock] rotated stale lock ‚Üí {0}" -f $rot)
  } else {
    Write-Error 'CONFLICT: .gpt5.lock.ps7-headers exists (recent)'; exit 11
  }
}
"locked $(Get-Date -Format o)" | Out-File $LockFile -Encoding utf8 -NoNewline
$sw=[Diagnostics.Stopwatch]::StartNew()
$trace=[guid]::NewGuid().ToString()
function Write-Log($level,$action,$message,$outcome='',$errorCode='',$inputHash=''){
  $rec=[ordered]@{timestamp=(Get-Date).ToString('o');level=$level;traceId=$trace;module='ps7-guard';action=$action;inputHash=$inputHash;outcome=$outcome;durationMs=$sw.ElapsedMilliseconds;errorCode=$errorCode;message=$message}|ConvertTo-Json -Compress
  $log=Join-Path $RepoRoot 'logs/apply-log.jsonl'; New-Item -ItemType Directory -Force -Path (Split-Path $log)|Out-Null; Add-Content -Path $log -Value $rec
}

# === Required header snippet ===
$RequiredHeader = @(
  "#requires -Version 7.0",
  "param([switch]`$ConfirmApply,[string]`$Root)",
  "Set-StrictMode -Version Latest",
  "`$ErrorActionPreference='Stop'",
  "`$PSDefaultParameterValues['Out-File:Encoding']='utf8'",
  "`$PSDefaultParameterValues['*:Encoding']='utf8'",
  "if (`$env:CONFIRM_APPLY -eq 'true') { `$ConfirmApply = `$true }"
) -join "`n"

# === Matchers (use single-quoted regex literals) ===
$rxRequires = [regex]'(?m)^\s*#requires\s+-Version\s+7(\.0+)?\s*$'
$rxStrict   = [regex]'(?m)^\s*Set-StrictMode\s+-Version\s+Latest\s*$'
$rxEAP      = [regex]'(?m)^\s*\$ErrorActionPreference\s*=\s*''Stop''\s*$'
$rxParam    = [regex]'(?m)^\s*param\s*\(\s*\[switch\]\$ConfirmApply.*\[string\]\$Root.*\)\s*$'
$rxEnc1     = [regex]'(?m)\$PSDefaultParameterValues\[''Out-File:Encoding''\]\s*=\s*''utf8'''
$rxEnc2     = [regex]'(?m)\$PSDefaultParameterValues\[''\*:Encoding''\]\s*=\s*''utf8'''
$rxEnv      = [regex]'(?m)if\s*\(\s*\$env:CONFIRM_APPLY\s*-eq\s*''true''\s*\)\s*\{\s*\$ConfirmApply\s*=\s*\$true\s*\}'

# === Skip rules & file list ===
$skipRx = [regex]'(?i)[/\\](?:\.git|node_modules|dist|out|coverage|\.venv|\.pytest_cache|\.idea|\.vscode)(?:[/\\]|$)'
$files = Get-ChildItem -Recurse -File -Include *.ps1,*.psm1 | Where-Object { -not $skipRx.IsMatch($_.FullName) }
$files = $files | Where-Object { $_.FullName -ne $PSCommandPath }  # self-skip

# === Scan ===
$plan = @()
foreach ($f in $files) {
  $txt = Get-Content -Raw -Encoding utf8 $f.FullName
  $missing = @()
  if (-not $rxRequires.IsMatch($txt)) { $missing += '#requires' }
  if (-not $rxParam.IsMatch($txt))    { $missing += 'param(ConfirmApply,Root)' }
  if (-not $rxStrict.IsMatch($txt))   { $missing += 'Set-StrictMode' }
  if (-not $rxEAP.IsMatch($txt))      { $missing += 'ErrorActionPreference' }
  if (-not $rxEnc1.IsMatch($txt))     { $missing += "PSDefault Out-File:Encoding" }
  if (-not $rxEnc2.IsMatch($txt))     { $missing += "PSDefault *:Encoding" }
  if (-not $rxEnv.IsMatch($txt))      { $missing += 'CONFIRM_APPLY bridge' }

  if ($missing.Count -gt 0) {
    $plan += [pscustomobject]@{ Path=$f.FullName; Missing=$missing -join ', ' }
  }
}

if (-not $plan) {
  Write-Host "‚úÖ Î™®Îì† PowerShell Ïä§ÌÅ¨Î¶ΩÌä∏Í∞Ä PS7 ÏïàÏ†Ñ Ìó§ÎçîÎ•º Í∞ñÏ∂îÏóàÏäµÎãàÎã§."
  Write-Log 'INFO' 'scan' 'all good' 'OK'
  exit 0
}

Write-Host ("üìù Ìó§Îçî ÎàÑÎùΩ ÌååÏùº {0}Í∞ú" -f $plan.Count)
$plan | ForEach-Object { Write-Host (" - {0} :: {1}" -f $_.Path, $_.Missing) }

if (-not $ConfirmApply) {
  Write-Host "`nDRY-RUN ‚úÖ Ïã§Ï†ú ÏàòÏ†ïÏùÄ ÌïòÏßÄ ÏïäÏïòÏäµÎãàÎã§."
  Write-Host "Ï†ÅÏö©ÌïòÎ†§Î©¥:"
  Write-Host "  `$env:CONFIRM_APPLY='true'; pwsh -File scripts/g5/guard-ps7-header.ps1 -ConfirmApply"
  Write-Log 'INFO' 'dryrun' ("would fix {0} files" -f $plan.Count) 'NOT_APPLIED'
  exit 0
}

# === Apply: insert header (backup + atomic replace) ===
$ts = Get-Date -Format 'yyyyMMdd-HHmmss'
foreach ($it in $plan) {
  $p = $it.Path
  $src = Get-Content -Raw -Encoding utf8 $p
  $new = ($RequiredHeader + "`n`n" + $src)
  $bak = "$p.bak-$ts"
  Copy-Item $p $bak -Force
  $tmp = "$p.tmp"
  Set-Content -Path $tmp -Value $new -Encoding utf8 -NoNewline
  Move-Item -Force $tmp $p
  Write-Log 'INFO' 'apply' "inserted header ‚Üí $p" 'APPLIED' '' ((Get-FileHash $p -Algorithm SHA256).Hash)
  Write-Host "[fixed] $p ‚Äî backup: $bak"
}

Write-Host "`nDONE ‚úÖ Ìó§Îçî ÏÇΩÏûÖ ÏôÑÎ£å"
exit 0